import "../../styles/single_styles.css";
import "../../styles/single_responsive.css";
import { toast } from "react-toastify";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faHeart, faMinus, faPlus, faStar, faTruckFast } from "@fortawesome/free-solid-svg-icons";
import { useNavigate, useParams } from "react-router-dom";
import { useEffect, useState } from "react";
import instance from "../api";
import { Product } from "../interfaces/Product";
import { CSSTransition, TransitionGroup } from "react-transition-group";
import { useAuth } from "../contexts/AuthContext";

const Product_details = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  useEffect(() => {
    window.scrollTo(0, 0);
  }, [id]);

  const [product, setProduct] = useState<Product | null>(null);
  const [mainImage, setMainImage] = useState<string | undefined>(undefined);
  const [selectedThumbnail, setSelectedThumbnail] = useState<string | undefined>(undefined);
  const [activeTab, setActiveTab] = useState<string>("tab_1"); // Th√™m state cho tab
  const [relatedProducts, setRelatedProducts] = useState<Product[]>([]);
  const [quantity, setQuantity] = useState<number>(1);
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  const [selectedSize, setSelectedSize] = useState<string | null>(null);

  const { user } = useAuth();

  const formatVND = (price?: number) =>
    price ? price.toLocaleString("vi-VN") + "‚Ç´" : "";

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const { data } = await instance.get(`/products/${id}`);
        const current = data.data;
        setProduct(current);
        setMainImage(current.image);
        setSelectedThumbnail(current.image);

        // Fetch all products ƒë·ªÉ l·ªçc li√™n quan
        const resAll = await instance.get("/products");
        const allProducts: Product[] = resAll.data.data;
        const related = allProducts.filter(
          (p) =>
            p._id !== current._id &&
            p.category?._id === current.category?._id
        );
        setRelatedProducts(related);
      } catch (error) {
        console.error("Failed to fetch product", error);
      }
    };
    fetchProduct();
  }, [id]);


  const handleThumbnailClick = (imageUrl: string) => {
    setMainImage(imageUrl);
    setSelectedThumbnail(imageUrl);
  };

  const handleTabClick = (tabId: string) => {
    setActiveTab(tabId);
  };
  // üëâ Th√™m v√†o ƒë·∫ßu file

  const increaseQuantity = () => {
    setQuantity((prev) => prev + 1);
  };

  const decreaseQuantity = () => {
    setQuantity((prev) => (prev > 1 ? prev - 1 : 1));
  };

const handleAddToCart = async () => {
  try {
    // ‚úÖ 1. Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc
    const token = localStorage.getItem("accessToken");
    if (!token) {
      toast.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
      navigate("/login");
      return;
    }

    // ‚úÖ 2. Ki·ªÉm tra ch·ªçn m√†u / size
    const hasColor = product?.color && product.color.length > 0;
    const hasSize = product?.size && product.size.length > 0;

    if (hasColor && hasSize) {
      if (!selectedColor || !selectedSize) {
        toast.warning("Vui l√≤ng ch·ªçn m√†u v√† k√≠ch c·ª°!");
        return;
      }
    } else if (!hasColor && hasSize) {
      if (!selectedSize) {
        toast.warning("Vui l√≤ng ch·ªçn k√≠ch c·ª°!");
        return;
      }
    }

    // ‚úÖ 3. G·ª≠i API th√™m v√†o gi·ªè h√†ng
    await instance.post(
      "/cart",
      {
        productId: product?._id,
        quantity,
        color: hasColor ? selectedColor : undefined,
        size: hasSize ? selectedSize : undefined,
      },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    toast.success("ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
    window.dispatchEvent(new CustomEvent("cartUpdated"));
  } catch (error) {
    console.error(error);
    toast.error("L·ªói khi th√™m v√†o gi·ªè h√†ng.");
  }
};



  if (!product) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <div className="container single_product_container">
        <div className="row">
          <div className="col">
            {/* Breadcrumbs */}
            <div className="breadcrumbs d-flex flex-row align-items-center">
              <ul>
                <li>
                  <a href="index.html">Trang ch·ªß</a>
                </li>
                <li>
                  <a href="categories.html">
                    <i className="fa fa-angle-right" aria-hidden="true" />
                    {product.category ? product.category.title : "Danh m·ª•c"}
                  </a>
                </li>
                <li className="active">
                  <a href="#">
                    <i className="fa fa-angle-right" aria-hidden="true" />
                    Chi ti·∫øt s·∫£n ph·∫©m
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-lg-7">
            {/* ·∫¢nh s·∫£n ph·∫©m */}
            <div className="single_product_pics">
              <div className="row">
                <div className="col-lg-3 thumbnails_col order-lg-1 order-2">
                  <div className="single_product_thumbnails">
                    <ul>
                      {product.image && (
                        <li
                          className={product.image === selectedThumbnail ? "active" : ""}
                          onClick={() => handleThumbnailClick(product.image!)}
                        >
                          <img src={product.image} alt="·∫¢nh ch√≠nh" data-image={product.image} />
                        </li>
                      )}
                      {product.thumbnail && product.thumbnail.map((thumb: string, index: number) => (
                        <li
                          key={index}
                          className={thumb === selectedThumbnail ? "active" : ""}
                          onClick={() => handleThumbnailClick(thumb)}
                        >
                          <img src={thumb} alt={`H√¨nh nh·ªè ${index + 1}`} data-image={thumb} />
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div className="col-lg-9 image_col order-lg-2 order-1">
                  <div className="single_product_image">
                    <img
                      className="single_product_image_background"
                      style={{ backgroundImage: `url(${mainImage})` }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="col-lg-5">
            <div className="product_details">
              <div className="product_details_title">
                <h2>{product.title}</h2>
                <p>{product.description}</p>
              </div>

              <div className="free_delivery d-flex flex-row align-items-center justify-content-center">
                <span><FontAwesomeIcon icon={faTruckFast} flip="horizontal" /></span>
                <span>Giao h√†ng mi·ªÖn ph√≠</span>
              </div>
              <div className="original_price">{formatVND(product.oldprice)}</div>
              <div className="product_price-product-detail">{formatVND(product.newprice)}</div>

              <ul className="star_rating">
                {[...Array(5)].map((_, index) => (
                  <li key={index}>
                    <FontAwesomeIcon icon={faStar} style={{ color: "#FFD43B" }} />
                  </li>
                ))}
              </ul>

              {/* ‚úÖ Th√™m c√°c th√¥ng tin chi ti·∫øt */}
              <div className="product_details_info mt-3">
                {product.brand && <p><strong>Th∆∞∆°ng hi·ªáu:</strong> {product.brand}</p>}
                {typeof product.stock === "number" && <p><strong>S·ªë l∆∞·ª£ng c√≤n:</strong> {product.stock}</p>}
                <p>
                  <strong>Tr·∫°ng th√°i:</strong>{" "}
                  <span style={{ color: product.status ? "green" : "red" }}>
                    {product.status ? "C√≤n h√†ng" : "H·∫øt h√†ng"}
                  </span>
                </p>
              </div>

              {/* ‚úÖ M√†u s·∫Øc */}
              {product.color && product.color.length > 0 && (
                <div className="product_color">
                  <span className="label">Ch·ªçn m√†u:</span>
                  <ul className="color_list d-flex gap-2 mt-2">
                    {product.color.map((color, index) => (
                      <li
                        key={index}
                        title={color}
                        onClick={() => setSelectedColor(color)}
                        style={{
                          backgroundColor: color,
                          border: selectedColor === color ? "2px solid #000" : "1px solid #ccc",
                          width: "30px",
                          height: "30px",
                          borderRadius: "50%",
                          cursor: "pointer",
                        }}
                      />
                    ))}
                  </ul>
                </div>
              )}



              {/* ‚úÖ K√≠ch c·ª° */}
              {product.size && product.size.length > 0 && (
                <div className="product_size mt-3">
                  <span>Ch·ªçn k√≠ch c·ª°:</span>
                  <ul className="d-flex gap-2 mt-2">
                    {product.size.map((size, index) => (
                      <li
                        key={index}
                        onClick={() => setSelectedSize(size)}
                        style={{
                          border: selectedSize === size ? "2px solid #000" : "1px solid #ccc",
                          padding: "5px 10px",
                          borderRadius: "4px",
                          cursor: "pointer",
                        }}
                      >
                        {size}
                      </li>
                    ))}
                  </ul>
                </div>
              )}


              {/* S·ªë l∆∞·ª£ng v√† gi·ªè h√†ng */}
              <div className="quantity d-flex flex-column flex-sm-row align-items-sm-center mt-4">
                <span>S·ªë l∆∞·ª£ng:</span>
                <div className="quantity_selector">
                  <span className="minus" onClick={decreaseQuantity}>
                    <FontAwesomeIcon icon={faMinus} />
                  </span>
                  <span id="quantity_value">{quantity}</span>
                  <span className="plus" onClick={increaseQuantity}>
                    <FontAwesomeIcon icon={faPlus} />
                  </span>
                </div>
                <div className="red_button add_to_cart_button-product-detail" onClick={handleAddToCart}>
                  <a href="#">Th√™m v√†o gi·ªè</a>
                </div>

                <div className="product_favorite">
                  <FontAwesomeIcon icon={faHeart} beat style={{ color: "#CCC" }} />
                </div>
              </div>

            </div>

          </div>
        </div>
      </div>

      <div className="tabs_section_container">
        <div className="container">
          <div className="row">
            <div className="col">
              <div className="tabs_container">
                <ul className="tabs d-flex flex-sm-row flex-column align-items-left align-items-md-center justify-content-center">
                  <li className={`tab ${activeTab === "tab_1" ? "active" : ""}`} onClick={() => handleTabClick("tab_1")}>
                    <span>M√¥ t·∫£</span>
                  </li>
                  <li className={`tab ${activeTab === "tab_2" ? "active" : ""}`} onClick={() => handleTabClick("tab_2")}>
                    <span>Th√¥ng tin th√™m</span>
                  </li>
                  <li className={`tab ${activeTab === "tab_3" ? "active" : ""}`} onClick={() => handleTabClick("tab_3")}>
                    <span>ƒê√°nh gi√° (2)</span>
                  </li>
                </ul>
              </div>
            </div>
          </div>

          <div className="row">
            <div className="col">
              {/* M√¥ t·∫£ */}
              <div id="tab_1" className={`tab_container ${activeTab === "tab_1" ? "active" : ""}`}>
                <div className="row">
                  <div className="col-lg-5 desc_col">
                    <div className="tab_title"><h4>M√¥ t·∫£</h4></div>
                    <div className="tab_text_block">
                      <h2>√Åo n·ªâ cotton c√≥ t√∫i</h2>
                      <p>{product.description}</p>
                    </div>
                    <div className="tab_image"><img src={product.thumbnail?.[0]} alt="" /></div>
                    <div className="tab_text_block">
                      <h2>√Åo n·ªâ cotton c√≥ t√∫i</h2>
                      <p>{product.description}</p>
                    </div>
                  </div>
                  <div className="col-lg-5 offset-lg-2 desc_col">
                    <div className="tab_image"><img src={product.image} alt="" /></div>
                    <div className="tab_text_block">
                      <h2>√Åo n·ªâ cotton c√≥ t√∫i</h2>
                      <p>{product.description}</p>
                    </div>
                    <div className="tab_image desc_last"><img src={product.thumbnail?.[1]} alt="" /></div>
                  </div>
                </div>
              </div>

              {/* Th√¥ng tin th√™m */}
              <div id="tab_2" className={`tab_container ${activeTab === "tab_2" ? "active" : ""}`}>
                <div className="row">
                  <div className="col additional_info_col">
                    <div className="tab_title additional_info_title"><h4>Th√¥ng tin th√™m</h4></div>
                    <p>M√ÄU S·∫ÆC: <span>V√†ng, ƒê·ªè</span></p>
                    <p>K√çCH C·ª†: <span>L, M, XL</span></p>
                  </div>
                </div>
              </div>

              {/* ƒê√°nh gi√° */}
              <div id="tab_3" className={`tab_container ${activeTab === "tab_3" ? "active" : ""}`}>
                <div className="row">
                  <div className="col-lg-6 reviews_col">
                    <div className="tab_title reviews_title"><h4>ƒê√°nh gi√° (2)</h4></div>
                    {[1, 2].map((item, idx) => (
                      <div key={idx} className="user_review_container d-flex flex-column flex-sm-row">
                        <div className="user">
                          <div className="user_pic">
                            <img src={`https://i.pravatar.cc/100?img=${idx + 1}`} alt="avatar" />
                          </div>


                          <div className="user_rating">
                            <ul className="star_rating">
                              {[...Array(5)].map((_, index) => (
                                <li key={index}>
                                  <FontAwesomeIcon icon={faStar} style={{ color: "#FFD43B" }} />
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                        <div className="review">
                          <div className="review_date">27 Th√°ng 8, 2016</div>
                          <div className="user_name">Brandon William</div>
                          <p>
                            Th·ªùi gian g·∫ßn ƒë√¢y t√¥i ƒë√£ mua s·∫£n ph·∫©m n√†y v√† r·∫•t h√†i l√≤ng.
                            Thi·∫øt k·∫ø ƒë·∫πp, ch·∫•t l∆∞·ª£ng t·ªët v√† s·ª≠ d·ª•ng d·ªÖ d√†ng.
                            T√¥i ch·∫Øc ch·∫Øn s·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√® v√† s·∫Ω mua l·∫°i trong t∆∞∆°ng lai!
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="col-lg-6 add_review_col">
                    <div className="add_review">
                      <form id="review_form" action="post">
                        <div>
                          <h1>Th√™m ƒë√°nh gi√°</h1>
                          <input className="form_input input_name" type="text" name="name" placeholder="H·ªç t√™n*" required />
                          <input className="form_input input_email" type="email" name="email" placeholder="Email*" required />
                        </div>
                        <div>
                          <h1>ƒê√°nh gi√° c·ªßa b·∫°n:</h1>
                          <ul className="user_star_rating">
                            {[...Array(5)].map((_, index) => (
                              <li key={index}><FontAwesomeIcon icon={faStar} style={{ color: "#FFD43B" }} /></li>
                            ))}
                          </ul>
                          <textarea className="input_review" name="message" placeholder="N·ªôi dung ƒë√°nh gi√°" rows={4} required />
                        </div>
                        <div className="text-left text-sm-right">
                          <button type="submit" className="red_button review_submit_btn">G·ª≠i ƒë√°nh gi√°</button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
              {/* End Review */}
            </div>
          </div>
        </div>
      </div>

      {/* Related Products Section */}
      <div className="new_arrivals mt-5">
        <div className="container">
          <div className="row">
            <div className="col text-center">
              <div
                className="section_title new_arrivals_title"
                style={{ marginTop: "100px" }}
              >
                <h3>S·∫£n ph·∫©m li√™n quan</h3>
              </div>

            </div>
          </div>

          <div className="row">
            <div className="col">
              <div className="product-grid" data-isotope='{ "itemSelector": ".product-item", "layoutMode": "fitRows" }'>
                <TransitionGroup component={null}>
                  {relatedProducts.map((product, index) => (
                    <CSSTransition key={product._id} timeout={300} classNames="fade">
                      <div
                        className={`product-item ${product.category ? product.category.title : ""}`}
                        onClick={() => navigate(`/product-detail/${product._id}`)}
                        data-aos="zoom-in"
                        data-aos-delay={index * 100}
                      >
                        <div className="product product_filter">
                          <div className="product_image">
                            <img src={product.image} alt={product.title} />
                          </div>
                          <div className="favorite favorite_left"></div>
                          <div className="product_info">
                            <h6 className="product_name">
                              <a href="#">{product.title}</a>
                            </h6>
                            <div className="product_price">
                              {formatVND(product.newprice)}
                              {product.oldprice && <span>{formatVND(product.oldprice)}</span>}
                            </div>
                          </div>
                        </div>
                        <div className="red_button add_to_cart_button">
                          <a href="#">Th√™m v√†o gi·ªè</a>
                        </div>
                      </div>
                    </CSSTransition>
                  ))}
                </TransitionGroup>
              </div>
            </div>
          </div>
        </div>
      </div>

    </>
  );
};

export default Product_details;
